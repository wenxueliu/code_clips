#! /bin/bash

exec_mode=$1
default_core=`cat /proc/cpuinfo | grep processor | wc -l`
default_core=$(( default_core - 1 ))
core=${core:-$default_core}
con_begin=${con_begin:-800}
con_end=${con_end:-1000}
foot=${foot:-100}
#the steps must be int
steps=$(( ($con_end - $con_begin) / $foot + 1 ))
time_s=${time_s:-100000}
log_dir=/tmp/ab
ip="10.9.1.42"
port=80
url="$ip:$port"

#trap "kill $$" TERM EXIT

usage() {
    echo "$0 start|stop|status|info"
}

if [[ $# = 0 ]]; then
    usage
    exit 0
fi

#
# now statistic
# 1. Concurrency Level
# 2. Time per request
# 3. Requests per second
# 4. Time taken for tests
#
get_statistic() {
    local log_dir=$log_dir
    local concurreny=()
    local tps=()
    local total_req=()
    local time_per_req_all=()
    local time_per_req=()
    local time_taken=()
    for result_file in `ls $log_dir`; do
        result_file="$log_dir/$result_file"

        concurrent_tmp=`grep "Concurrency Level" $result_file | awk '{ print $3 }'`
        concurrent_tmp=( $concurrent_tmp )

        total_req_tmp=`grep "Complete requests:" $result_file | awk '{ print $3 }'`
        total_req_tmp=( $total_req_tmp )

        tps_tmp=`grep "Requests per second:" $result_file | awk '{ print $4 }'`
        tps_tmp=( $tps_tmp )

        time_per_req_all_tmp=`grep -E "Time per request:.*\(mean\)" $result_file | awk '{ print $4 }'`
        time_per_req_all_tmp=( $time_per_req_all_tmp )

        time_per_req_tmp=`grep -E "Time per request:.*\(mean, across.*" $result_file | awk '{ print $4 }'`
        time_per_req_tmp=( $time_per_req_tmp )

        time_taken_tmp=`grep -r "Time taken for tests" $result_file | awk '{ print $5 }'`
        time_taken_tmp=( $time_taken_tmp )

        for ((i=0; i< $steps; i++));do
            concurreny[$i]=`awk -v total=${concurreny[$i]} -v tmp=${concurrent_tmp[$i]} 'BEGIN {print total+tmp }'`
            tps[$i]=`awk -v total=${tps[$i]} -v tmp=${tps_tmp[$i]} 'BEGIN {print total+tmp }'`
            total_req[$i]=`awk -v total=${total_req[$i]} -v tmp=${total_req_tmp[$i]} 'BEGIN {print total+tmp }'`
            time_per_req_all[$i]=`awk -v total=${time_per_req_all[$i]} -v tmp=${time_per_req_all_tmp[$i]} 'BEGIN {print (total+tmp)/2 }'`
            time_per_req[$i]=`awk -v total=$time_per_req[$i] -v tmp=$time_per_req_tmp[$i] 'BEGIN {print (total+tmp)/2 }'`
            time_taken[$i]=$time_s
        done
    done
    #printf "%-15s %-15s %-15s %-15s %-15s\n" concurreny tps total_req time_per_req_all time_per_req time_taken
    printf "%-15s %-15s %-15s %-15s\n" concurreny tps total_req time_taken
    for (( i=0; i < $steps; i++)); do
        #printf "%-15s %-15s %-15s %-15s %-15s\n" ${concurreny[$i]} ${tps[$i]} ${total_req[$i]} ${time_per_req_all[$i]}  ${time_per_req[$i]} ${time_taken[$i]}
        printf "%-15s %-15s %-15s %-15s \n" ${concurreny[$i]} ${tps[$i]} ${total_req[$i]} ${time_taken[$i]}
    done
    printf "\n"
}

get_statistic_old() {
    local log_dir=$log_dir
    local concurreny=()
    local tps=()
    local total_req=()
    local time_per_req_all=()
    local time_per_req=()
    local time_taken=()
    for result_file in `ls $log_dir`; do
        result_file="$log_dir/$result_file"

        concurrent_tmp=`grep "Concurrency Level" $result_file | awk '{ print $3 }'`
        concurrent_tmp=( $concurrent_tmp )

        total_req_tmp=`grep "Complete requests:" $result_file | awk '{ print $3 }'`
        total_req_tmp=( $total_req_tmp )

        tps_tmp=`grep "Requests per second:" $result_file | awk '{ print $4 }'`
        tps_tmp=( $tps_tmp )

        time_per_req_all_tmp=`grep -E "Time per request:.*\(mean\)" $result_file | awk '{ print $4 }'`
        time_per_req_all_tmp=( $time_per_req_all_tmp )

        time_per_req_tmp=`grep -E "Time per request:.*\(mean, across.*" $result_file | awk '{ print $4 }'`
        time_per_req_tmp=( $time_per_req_tmp )

        time_taken_tmp=`grep -r "Time taken for tests" $result_file | awk '{ print $5 }'`
        time_taken_tmp=( $time_taken_tmp )

        for ((i=0; i< $steps; i++));do
            concurreny[$i]=`awk -v total=${concurreny[$i]} -v tmp=${concurrent_tmp[$i]} 'BEGIN {print total+tmp }'`
            tps[$i]=`awk -v total=${tps[$i]} -v tmp=${tps_tmp[$i]} 'BEGIN {print total+tmp }'`
            total_req[$i]=`awk -v total=${total_req[$i]} -v tmp=${total_req_tmp[$i]} 'BEGIN {print total+tmp }'`
            time_per_req_all[$i]=`awk -v total=${time_per_req_all[$i]} -v tmp=${time_per_req_all_tmp[$i]} 'BEGIN {print (total+tmp)/2 }'`
            time_per_req[$i]=`awk -v total=$time_per_req[$i] -v tmp=$time_per_req_tmp[$i] 'BEGIN {print (total+tmp)/2 }'`
            time_taken[$i]=$time_s
        done
    done
    for (( i=0; i < $steps; i++)); do
        #printf "%-15s %-15s %-15s %-15s %-15s\n" ${concurreny[$i]} ${tps[$i]} ${total_req[$i]} ${time_per_req_all[$i]}  ${time_per_req[$i]} ${time_taken[$i]}
        printf "%-15s %-15s\n" ${concurreny[$i]} ${tps[$i]}
    done
}

abtest__() {
    local con=$1
    local time_s=$2

    log_name="abtest"
    for i in `seq 0 $core`; do
        log_path=${log_dir}/${log_name}_$i
        #taskset -c $i ab -c $con -t $time_s http://$url/ |tee -a $log_path &
        ab -c $con -n $time_s http://$url/ |tee -a $log_path &
    done
    local $core_num=0
    for pid in `ps axu | grep [a]b -c | awk '{ print $2 }'`; do 
	taskset -c $core_num -p $pid
        core_num=$(( $core_num + 1 ))
        renice -n -10 -p $pid
    done
    wait
}

abtest() {
    for ((con=1; con <=$steps; con++)) {
        con_cur=$(( $con * $foot + $con_begin))
        abtest__ $con_cur $time_s
    }
}


main() {
    exec_mode=$1

    if [[ $exec_mode = "start" ]]; then
        if [[ -d $log_dir ]];then
            echo "backup the $log_dir first"
            exit 1
        fi
        mkdir -p $log_dir
        abtest
    elif [[ $exec_mode = "stop" ]]; then
        for pid in `ps axu | grep "[a]b -c" | awk '{ print $2 }'`; do 
            kill $pid
        done
    elif [[ $exec_mode = "status" ]]; then
        for pid in `ps axu | grep "[a]b -c" | awk '{ print $2 }'`; do 
            echo $pid
        done
    elif [[ $exec_mode = "info" ]]; then
        get_statistic_old $log_dir
    elif [[ $exec_mode = "clean" ]]; then
        rm -rf $log_dir
    else
        usage
    fi
}

main $1
