#! /bin/bash

#######################################################
# @author : liuwenxue
# TODO
# 1. supprot sepcific process
#######################################################

rrd_dir=$1
rrd_dir=${rrd_dir:-"/tmp/tcp"}

INFO() {
    echo $1
}

DEBUG() {
    #echo $1
    :
}
#the state will monitor, change is for your perfer

ipv4_list=(IpInReceives IpInDelivers IpOutRequests IpOutDiscards IpOutNoRoutes)
icmpv4_list=(IcmpInMsgs IcmpInErrors IcmpInTimeExcds IcmpInEchoReps IcmpInTimestamps \
            IcmpOutErrors IcmpOutTimeExcds IcmpOutEchoReps IcmpOutTimestamps IcmpMsgInType0 \
            IcmpMsgInType3 IcmpMsgInType8 IcmpMsgOutType0 IcmpMsgOutType3 IcmpMsgOutType8)
tcpv4_list=(TcpActiveOpens TcpPassiveOpens TcpAttemptFails TcpEstabResets TcpInSegs TcpOutSegs\
        TcpRetransSegs TcpInErrs TcpOutRsts)

udpv4_list=(UdpInDatagrams UdpNoPorts UdpOutDatagrams UdpSndbufErrors)

ipv6_list=(Ip6InReceives Ip6InDelivers Ip6OutRequests Ip6OutNoRoutes Ip6InMcastPkts \
        Ip6OutMcastPkts Ip6InOctets Ip6OutOctets Ip6InMcastOctets Ip6OutMcastOctets Ip6InNoECTPkts)

icmpv6_list=(Icmp6OutMsgs Icmp6OutRouterSolicits Icmp6OutNeighborSolicits Icmp6OutMLDv2Reports \
        Icmp6OutType133 Icmp6OutType135 Icmp6OutType143)

udpv6_list=(Udp6InDatagrams Udp6OutDatagrams)

tcpex_list=(TcpExtSyncookiesFailed TcpExtTW TcpExtPAWSEstab TcpExtDelayedACKs TcpExtDelayedACKLost \
    TcpExtTCPPrequeued TcpExtTCPDirectCopyFromPrequeue TcpExtTCPHPHits TcpExtTCPHPHitsToUser \
    TcpExtTCPPureAcks TcpExtTCPHPAcks TcpExtTCPSackRecovery TcpExtTCPDSACKUndo TcpExtTCPLossUndo \
    TcpExtTCPSackFailures TcpExtTCPFastRetrans TcpExtTCPForwardRetrans TcpExtTCPSlowStartRetrans \
    TcpExtTCPTimeouts TcpExtTCPLossProbes TcpExtTCPLossProbeRecovery TcpExtTCPDSACKOldSent \
    TcpExtTCPDSACKOfoSent TcpExtTCPDSACKRecv TcpExtTCPDSACKOfoRecv TcpExtTCPAbortOnData\
    TcpExtTCPAbortOnClose TcpExtTCPAbortOnTimeout TcpExtTCPAbortFailed TcpExtTCPDSACKIgnoredNoUndo \
    TcpExtTCPSpuriousRTOs TcpExtTCPSackShiftFallback TcpExtTCPRetransFail TcpExtTCPRcvCoalesce  \
    TcpExtTCPOFOQueue TcpExtTCPOFOMerge TcpExtTCPChallengeACK TcpExtTCPSYNChallenge TcpExtTCPSpuriousRtxHostQueues)

ipex_list=(IpExtInNoRoutes IpExtInMcastPkts IpExtOutMcastPkts IpExtInBcastPkts IpExtInOctets IpExtOutOctets \
    IpExtInMcastOctets IpExtOutMcastOctets IpExtInBcastOctets IpExtInNoECTPkts)

net_list=(${ipv4_list[@]} ${tcpv4_list[@]}  ${tcpex_list[@]}  ${ipex_list[@]})

state_list=("ESTABLISHED" "SYN_SENT" "SYN_RECV" "FIN_WAIT1" "FIN_WAIT2"
    "TIME_WAIT" "CLOSE" "CLOSE_WAIT" "LAST_ACK" "LISTEN" "CLOSING" "UNKNOWN"
    ${net_list[@]})

#CAUTION: don't change flowing variable if you can grep it
start_time=`date "+%s"`
ds_type=ABSOLUTE

avarage_interval=1
rrd_size=10000

max_interval=10
max_size=$(( $rrd_size / ( $max_interval / $avarage_interval)))

min_interval=10
min_size=$(( $rrd_size / ( $max_interval / $avarage_interval)))

tcp_state() {
    local ip=$1
    local port=$2
    local now=`date "+%s"`

    if [[ -z $ip ]];then
        cur_state=`netstat -ant4 | awk '{ if (NR > 2) {state[$6]++ } } END { for (s in state){ print s ":" state[s] } }'`
    elif [[ -z $port ]];then
        #TODO
        #cur_state=`netstat -ant4 | awk '/$ip/{ state[$6]++ } END { for (s in state){ print s ":" state[s] } }'`
        cur_state=`netstat -ant4 | grep $ip | awk ' { state[$6]++ } END { for (s in state){ print s ":" state[s] } }'`
    else
        #TODO
        #cur_state=`netstat -ant4 | awk '/$ip:$port/{ state[$6]++ } END { for (s in state){ print s ":" state[s] } }'`
        cur_state=`netstat -ant4 | grep "$ip:$port" | awk '{ state[$6]++ } END { for (s in state){ print s ":" state[s] } }'`
    fi

    for s in $cur_state; do
        echo "$now:$s"
    done
}

net_state() {
    local now=`date "+%s"`
    local cur_state=`nstat -z | awk '{ if (NR > 1) { print $1 ":" $2 ":" $3 } }'`
    for s in $cur_state; do
        echo "$now:$s"
    done
}

tcp_state_continue() {
    local step=$1
    step=${step:-1}
    local ip=$2
    local port=$3
    step=${step:-1}
    while true; do
        tcp_state $ip $port
        sleep $step
    done
}

dump_net_list() {
    for i in ${state_list[@]}; do
        echo $i
    done
}

net_state_continue() {
    local step=$1
    step=${step:-1}
    while true; do
        nstat
        sleep $step
    done
}

#====================================================


get_rrd_path() {
    local rrd_dir=$1
    local rrd_file=$2
    mkdir -p $rrd_dir
    echo $rrd_dir/$rrd_file".rrd"
}

#init tcp state with rrd file
state_rrd_init() {
    mkdir -p $rrd_dir

    local step=$1
    step=${step:-1}

    local start_time=$2
    local now=`date "+%s"`
    local default_start_time=$(( $now - $step ))
    start_time=${start_time:-$default_start_time}

    for state in ${state_list[@]}; do
        state=`get_state_name $state`
        local rrd_path=`get_rrd_path $rrd_dir $state`
        DEBUG "create $state in $rrd_path"
        rrdtool create $rrd_path --start $start_time -s $step\
            DS:$state:$ds_type:600:U:U \
            RRA:AVERAGE:0.5:1:$rrd_size \
            RRA:MAX:0.5:$max_interval:$max_size \
            RRA:MIN:0.5:$min_interval:$min_size
    done
}

#update tcp state to rrdfile
#such as
#1. tcp_state_rrd_update "127.0.0.1"
#2. tcp_state_rrd_update "127.0.0.1" "80"
tcp_state_rrd_update() {
    local ip=$1
    local port=$2

    for state in `tcp_state $ip $port`; do
        local timestamp=`echo $state | awk -F ":" '{ print $1}'`
        local rrd_file=`echo $state | awk -F ":" '{ print $2}'`
        local value=`echo $state | awk -F ":" '{ print $3}'`
        DEBUG $state = $rrd_file $timestamp $value
        #see get_state_name
        rrd_file=`get_state_name $rrd_file`
        rrd_path=`get_rrd_path $rrd_dir $rrd_file`
        DEBUG "update $rrd_file in $rrd_path with $timestamp:$value"
        rrdtool update $rrd_path $timestamp:$value
    done
}

net_state_rrd_update() {
    for state in `net_state`; do
        local timestamp=`echo $state | awk -F ":" '{ print $1}'`
        local rrd_file=`echo $state | awk -F ":" '{ print $2}'`
        local value=`echo $state | awk -F ":" '{ print $3}'`
        DEBUG echo $state = $rrd_file $timestamp $value
        #see get_state_name
        rrd_file=`get_state_name $rrd_file`
        rrd_path=`get_rrd_path $rrd_dir $rrd_file`
        DEBUG "update $rrd_file in $rrd_path with $timestamp:$value"
        if [[ -f $rrd_path ]]; then
            rrdtool update $rrd_path $timestamp:$value
        fi
    done
}

#FIXED "Invalid DS name" bug for ds_name length must be less 20
get_state_name () {
    state_name=$1
    if [[ ${state_name:0:6} = "TcpExt" ]]; then
        state_name=${state_name:6:19}
    fi
    echo $state_name
}

#init tcp state with rrd file and update tcp state with fixed step
state_rrd_start() {
    local ip=$1
    local port=$2
    init_step=1
    update_step=3

    state_rrd_init $init_step

    while true; do
        INFO "update ... in $update_step s"
        tcp_state_rrd_update $ip $port
        net_state_rrd_update
        sleep $update_step
        trap "state_rrd_done " EXIT
    done
}


state_rrd_done() {
    local begin_time=$1
    begin_time=${begin_time:-$start_time}
    DEBUG "start_time:$start_time bgein_time:$begin_time"

    local end_time=$2
    local now=$((`date "+%s"` + 10))
    end_time=${end_time:-$now}

    for state in ${state_list[@]}; do
        state=`get_state_name $state`
        local rrd_path=`get_rrd_path $rrd_dir $state`
        rrdtool graph "$rrd_dir/$state"".png" -s $begin_time -e $end_time -h 400 \
            DEF:line1=$rrd_path:$state:AVERAGE LINE1:line1#FF0000:"Average" \
            DEF:line2=$rrd_path:$state:MAX LINE1:line2#00FF00:"Max" \
            DEF:line3=$rrd_path:$state:MIN LINE1:line3#0000FF:"Min"
    done
}

tcp_state_test () {
    echo "tcp_state_continue $step"
    tcp_state_continue $step

    #echo tcp_state_continue 1 "127.0.0.1"
    #tcp_state_continue 1 "127.0.0.1"

    #echo tcp_state_continue 1 "127.0.0.1" "53"
    #tcp_state_continue 1 "127.0.0.1" "53"
}

net_state_test () {
    net_state_continue 1
    #net_state_continue 2
}

#tcp_state_test
#dump_net_list

state_rrd_start

