#! /bin/bash

#######################################################
# @author : liuwenxue
# TODO
# 1. supprot sepcific process
#
# --------------- IP ------------
# IpInReceives    : total packets received
# IpInHdrErrors   :
# IpInAddrErrors  : incoming packets discarded
# IpForwDatagrams : forwarded
# IpInUnknownProtos :
# IpInDiscards    : incoming packets discarded
# IpInDelivers    : incoming packets delivered
# IpOutRequests   : requests sent out
# IpOutDiscards   : outgoing packets dropped
# IpOutNoRoutes   : dropped because of missing route
# IpReasmTimeout  :
# IpReasmReqds
# IpReasmOKs
# IpReasmFails
# IpFragOKs
# IpFragFails     : fragments failed
# IpFragCreates
#
# --------------- ICMP ------------
# IcmpInMsgs      : ICMP messages received
# IcmpInErrors    : input ICMP message failed.
# IcmpInCsumErrors:  
# IcmpInDestUnreachs : 
# IcmpInTimeExcds :
# IcmpInParmProbs :
# IcmpInSrcQuenchs:
# IcmpInRedirects :
# IcmpInEchos     : echo requests
# IcmpInEchoReps  : echo replies
# IcmpInTimestamps:
# IcmpInTimestampReps :
# IcmpInAddrMasks
# IcmpInAddrMaskReps :
# IcmpOutMsgs
# IcmpOutErrors
# IcmpOutDestUnreachs:
# IcmpOutTimeExcds : destination unreachable
# IcmpOutParmProbs
# IcmpOutSrcQuenchs
# IcmpOutRedirects
# IcmpOutEchos     :
# IcmpOutEchoReps  :
# IcmpOutTimestamps : echo request
# IcmpOutTimestampReps :
# IcmpOutAddrMasks
# IcmpOutAddrMaskReps :
# IcmpMsgInType0
# IcmpMsgInType3
# IcmpMsgInType8
# IcmpMsgOutType0
# IcmpMsgOutType3
# IcmpMsgOutType8
#
#
# --------------- TCP ------------
# TcpActiveOpens  : connections established
# TcpPassiveOpens : passive connection openings
# TcpAttemptFails : failed connection attempts
# TcpEstabResets  : connection resets received
# TcpInSegs       : segments received
# TcpOutSegs      : segments send out
# TcpRetransSegs  : segments retransmited
# TcpInErrs       : bad segments received.
# TcpOutRsts      : resets sent
# TcpInCsumErrors : 
# TcpExtSyncookiesSent
# TcpExtSyncookiesRecv            0                  0.0
# TcpExtSyncookiesFailed          0                  0.0
# TcpExtEmbryonicRsts             0                  0.0
# TcpExtPruneCalled               0                  0.0
# TcpExtRcvPruned                 0                  0.0
# TcpExtOfoPruned                 0                  0.0
# TcpExtOutOfWindowIcmps          0                  0.0
# TcpExtLockDroppedIcmps          0                  0.0
# TcpExtArpFilter
# TcpExtTW                        : TCP sockets finished time wait in fast timer 
# TcpExtTWRecycled                :
# TcpExtTWKilled                  0                  0.0
# TcpExtPAWSPassive               0                  0.0
# TcpExtPAWSActive                0                  0.0
# TcpExtPAWSEstab                 1                  0.0
# TcpExtDelayedACKs               : delayed acks sent
# TcpExtDelayedACKLocked          0                  0.0
# TcpExtDelayedACKLost            : 271                0.0
# TcpExtListenOverflows           0                  0.0
# TcpExtListenDrops               0                  0.0
# TcpExtTCPPrequeued              : packets directly queued to recvmsg prequeue.
# TcpExtTCPDirectCopyFromBacklog                    0.0
# TcpExtTCPDirectCopyFromPrequeue : bytes directly received in process context from prequeue
# TcpExtTCPPrequeueDropped        0                  0.0
# TcpExtTCPHPHits                 : packet headers predicted
# TcpExtTCPHPHitsToUser           : packets header predicted and directly queued to user

# TcpExtTCPPureAcks               : acknowledgments not containing data payload received
# TcpExtTCPHPAcks                 : predicted acknowledgments
# TcpExtTCPRenoRecovery           : 
# TcpExtTCPSackRecovery           : times recovered from packet loss by selective acknowledgedgements
# TcpExtTCPSACKReneging           0                  0.0
# TcpExtTCPFACKReorder            0                  0.0
# TcpExtTCPSACKReorder            0                  0.0
# TcpExtTCPRenoReorder            0                  0.0
# TcpExtTCPTSReorder              0                  0.0
# TcpExtTCPFullUndo               0                  0.0
# TcpExtTCPPartialUndo            0                  0.0
# TcpExtTCPDSACKUndo              0                  0.0
# TcpExtTCPLossUndo               : congestion windows recovered without slow start after partial ack
# TcpExtTCPLostRetransmit         0                  0.0
# TcpExtTCPRenoFailures           0                  0.0
# TcpExtTCPSackFailures           : timeouts after SACK recovery
# TcpExtTCPLossFailures           : timeouts in loss state
# TcpExtTCPFastRetrans            : fast retransmits
# TcpExtTCPForwardRetrans         : forward retransmits
# TcpExtTCPSlowStartRetrans       : retransmits in slow start
# TcpExtTCPTimeouts               : other TCP timeouts
# TcpExtTCPLossProbes             : TCPLossProbes
# TcpExtTCPLossProbeRecovery      : TCPLossProbeRecovery
# TcpExtTCPRenoRecoveryFail       0                  0.0
# TcpExtTCPSackRecoveryFail       : SACK retransmits failed
# TcpExtTCPSchedulerFailed        0                  0.0
# TcpExtTCPRcvCollapsed           0                  0.0
# TcpExtTCPDSACKOldSent           : DSACKs sent for old packets
# TcpExtTCPDSACKOfoSent           : DSACKs sent for out of order packets
# TcpExtTCPDSACKRecv              : DSACKs received
# TcpExtTCPDSACKOfoRecv           : DSACKs for out of order packets received
# TcpExtTCPAbortOnData            : connections reset due to unexpected data # 关键
# TcpExtTCPAbortOnClose           : connections reset due to early user close
# TcpExtTCPAbortOnMemory          0                  0.0
# TcpExtTCPAbortOnTimeout         : connections aborted due to timeout
# TcpExtTCPAbortOnLinger          0                  0.0
# TcpExtTCPAbortFailed            0                  0.0
# TcpExtTCPMemoryPressures        0                  0.0
# TcpExtTCPSACKDiscard            0                  0.0
# TcpExtTCPDSACKIgnoredOld        : TCPDSACKIgnoredOld
# TcpExtTCPDSACKIgnoredNoUndo     : TCPDSACKIgnoredNoUndo
# TcpExtTCPSpuriousRTOs           : TCPSpuriousRTOs
# TcpExtTCPMD5NotFound            0                  0.0
# TcpExtTCPMD5Unexpected          0                  0.0
# TcpExtTCPSackShifted            0                  0.0
# TcpExtTCPSackMerged             0                  0.0
# TcpExtTCPSackShiftFallback      : TCPSackShiftFallback
# TcpExtTCPBacklogDrop            0                  0.0
# TcpExtTCPMinTTLDrop             0                  0.0
# TcpExtTCPDeferAcceptDrop        0                  0.0
# TcpExtIPReversePathFilter       0                  0.0
# TcpExtTCPTimeWaitOverflow       0                  0.0
# TcpExtTCPReqQFullDoCookies      0                  0.0
# TcpExtTCPReqQFullDrop           0                  0.0
# TcpExtTCPRetransFail            : TCPRetransFail
# TcpExtTCPRcvCoalesce            : TCPRcvCoalesce
# TcpExtTCPOFOQueue               : TCPOFOQueue
# TcpExtTCPOFODrop                0                  0.0
# TcpExtTCPOFOMerge               : TCPOFOMerge
# TcpExtTCPChallengeACK           : TCPChallengeACK
# TcpExtTCPSYNChallenge           : TCPSYNChallenge
# TcpExtTCPFastOpenActive         0                  0.0
# TcpExtTCPFastOpenPassive        0                  0.0
# TcpExtTCPFastOpenPassiveFail    0                  0.0
# TcpExtTCPFastOpenListenOverflow 0                  0.0
# TcpExtTCPFastOpenCookieReqd     0                  0.0
# TcpExtTCPSpuriousRtxHostQueues  : TCPSpuriousRtxHostQueues
# TcpExtBusyPollRxPackets         0                  0.0

#
# ------  UDP ------------
# UdpInDatagrams : packets received
# UdpNoPorts     : packets to unknown port received.
# UdpInErrors    : packet receive errors
# UdpOutDatagrams: packets sent


#######################################################

#rrd_dir=$1
exec_mode=$1
rrd_dir=${rrd_dir:-"/tmp/tcp6"}

INFO() {
    echo $1
}

DEBUG() {
    #echo $1
    :
}
#the state will monitor, change is for your perfer

ipv4_list=(IpInReceives IpInDelivers IpOutRequests IpOutDiscards IpOutNoRoutes)
icmpv4_list=(IcmpInMsgs IcmpInErrors IcmpInTimeExcds IcmpInEchoReps IcmpInTimestamps \
            IcmpOutErrors IcmpOutTimeExcds IcmpOutEchoReps IcmpOutTimestamps IcmpMsgInType0 \
            IcmpMsgInType3 IcmpMsgInType8 IcmpMsgOutType0 IcmpMsgOutType3 IcmpMsgOutType8)
tcpv4_list=(TcpActiveOpens TcpPassiveOpens TcpAttemptFails TcpEstabResets TcpInSegs TcpOutSegs\
        TcpRetransSegs TcpInErrs TcpOutRsts)

udpv4_list=(UdpInDatagrams UdpNoPorts UdpOutDatagrams UdpSndbufErrors)

ipv6_list=(Ip6InReceives Ip6InDelivers Ip6OutRequests Ip6OutNoRoutes Ip6InMcastPkts \
        Ip6OutMcastPkts Ip6InOctets Ip6OutOctets Ip6InMcastOctets Ip6OutMcastOctets Ip6InNoECTPkts)

icmpv6_list=(Icmp6OutMsgs Icmp6OutRouterSolicits Icmp6OutNeighborSolicits Icmp6OutMLDv2Reports \
        Icmp6OutType133 Icmp6OutType135 Icmp6OutType143)

udpv6_list=(Udp6InDatagrams Udp6OutDatagrams)

tcpex_list=(TcpExtSyncookiesFailed TcpExtTW TcpExtPAWSEstab TcpExtDelayedACKs TcpExtDelayedACKLost \
    TcpExtTCPPrequeued TcpExtTCPDirectCopyFromPrequeue TcpExtTCPHPHits TcpExtTCPHPHitsToUser \
    TcpExtTCPPureAcks TcpExtTCPHPAcks TcpExtTCPSackRecovery TcpExtTCPDSACKUndo TcpExtTCPLossUndo \
    TcpExtTCPSackFailures TcpExtTCPFastRetrans TcpExtTCPForwardRetrans TcpExtTCPSlowStartRetrans \
    TcpExtTCPTimeouts TcpExtTCPLossProbes TcpExtTCPLossProbeRecovery TcpExtTCPDSACKOldSent \
    TcpExtTCPDSACKOfoSent TcpExtTCPDSACKRecv TcpExtTCPDSACKOfoRecv TcpExtTCPAbortOnData\
    TcpExtTCPAbortOnClose TcpExtTCPAbortOnTimeout TcpExtTCPAbortFailed TcpExtTCPDSACKIgnoredNoUndo \
    TcpExtTCPSpuriousRTOs TcpExtTCPSackShiftFallback TcpExtTCPRetransFail TcpExtTCPRcvCoalesce  \
    TcpExtTCPOFOQueue TcpExtTCPOFOMerge TcpExtTCPChallengeACK TcpExtTCPSYNChallenge TcpExtTCPSpuriousRtxHostQueues)

ipex_list=(IpExtInNoRoutes IpExtInMcastPkts IpExtOutMcastPkts IpExtInBcastPkts IpExtInOctets IpExtOutOctets \
    IpExtInMcastOctets IpExtOutMcastOctets IpExtInBcastOctets IpExtInNoECTPkts)

net_list=(${ipv4_list[@]} ${tcpv4_list[@]}  ${tcpex_list[@]}  ${ipex_list[@]})

state_list=("ESTABLISHED" "SYN_SENT" "SYN_RECV" "FIN_WAIT1" "FIN_WAIT2"
    "TIME_WAIT" "CLOSE" "CLOSE_WAIT" "LAST_ACK" "LISTEN" "CLOSING" "UNKNOWN")

#CAUTION: don't change flowing variable if you can grep it
start_time=`date "+%s"`
ds_type=GAUGE

avarage_interval=1
rrd_size=10000

max_interval=10
max_size=$(( $rrd_size / ( $max_interval / $avarage_interval)))

min_interval=10
min_size=$(( $rrd_size / ( $max_interval / $avarage_interval)))

tcp_state() {
    local ip=$1
    local port=$2
    local now=`date "+%s"`

    if [[ -z $ip ]];then
        cur_state=`netstat -ant4 | awk '{ if (NR > 2) {state[$6]++ } } END { for (s in state){ print s ":" state[s] } }'`
    elif [[ -z $port ]];then
        #TODO
        #cur_state=`netstat -ant4 | awk '/$ip/{ state[$6]++ } END { for (s in state){ print s ":" state[s] } }'`
        cur_state=`netstat -ant4 | grep $ip | awk ' { state[$6]++ } END { for (s in state){ print s ":" state[s] } }'`
    else
        #TODO
        #cur_state=`netstat -ant4 | awk '/$ip:$port/{ state[$6]++ } END { for (s in state){ print s ":" state[s] } }'`
        cur_state=`netstat -ant4 | grep "$ip:$port" | awk '{ state[$6]++ } END { for (s in state){ print s ":" state[s] } }'`
    fi

    for s in $cur_state; do
        echo "$now:$s"
    done
}

net_state() {
    local now=`date "+%s"`
    local cur_state=`nstat -z | awk '{ if (NR > 1) { print $1 ":" $2 ":" $3 } }'`
    for s in $cur_state; do
        echo "$now:$s"
    done
}

tcp_state_continue() {
    local step=$1
    step=${step:-1}
    local ip=$2
    local port=$3
    step=${step:-1}
    while true; do
        tcp_state $ip $port
        sleep $step
    done
}

dump_net_list() {
    for i in ${state_list[@]}; do
        echo $i
    done
}

net_state_continue() {
    local step=$1
    step=${step:-1}
    while true; do
        nstat
        sleep $step
    done
}

#====================================================


get_rrd_path() {
    local rrd_dir=$1
    local rrd_file=$2
    mkdir -p $rrd_dir
    echo $rrd_dir/$rrd_file".rrd"
}

#init tcp state with rrd file
state_rrd_init() {
    mkdir -p $rrd_dir

    local step=$1
    step=${step:-1}

    local start_time=$2
    local now=`date "+%s"`
    local default_start_time=$(( $now - $step ))
    start_time=${start_time:-$default_start_time}

    for state in ${state_list[@]}; do
        state=`get_state_name $state`
        local rrd_path=`get_rrd_path $rrd_dir $state`
        DEBUG "create $state in $rrd_path"
        rrdtool create $rrd_path --start $start_time -s $step\
            DS:$state:GAUGE:600:U:U \
            RRA:AVERAGE:0.5:1:$rrd_size \
            RRA:MAX:0.5:$max_interval:$max_size \
            RRA:MIN:0.5:$min_interval:$min_size
    done

    for state in ${net_list[@]}; do
        state=`get_state_name $state`
        local rrd_path=`get_rrd_path $rrd_dir $state`
        DEBUG "create $state in $rrd_path"
        rrdtool create $rrd_path --start $start_time -s $step\
            DS:$state:ABSOLUTE:600:U:U \
            RRA:AVERAGE:0.5:1:$rrd_size \
            RRA:MAX:0.5:$max_interval:$max_size \
            RRA:MIN:0.5:$min_interval:$min_size
    done
}

#update tcp state to rrdfile
#such as
#1. tcp_state_rrd_update "127.0.0.1"
#2. tcp_state_rrd_update "127.0.0.1" "80"
tcp_state_rrd_update() {
    local ip=$1
    local port=$2

    for state in `tcp_state $ip $port`; do
        local timestamp=`echo $state | awk -F ":" '{ print $1}'`
        local rrd_file=`echo $state | awk -F ":" '{ print $2}'`
        local value=`echo $state | awk -F ":" '{ print $3}'`
        DEBUG $state = $rrd_file $timestamp $value
        #see get_state_name
        rrd_file=`get_state_name $rrd_file`
        rrd_path=`get_rrd_path $rrd_dir $rrd_file`
        DEBUG "update $rrd_file in $rrd_path with $timestamp:$value"
        rrdtool update $rrd_path $timestamp:$value
    done
}

net_state_rrd_update() {
    for state in `net_state`; do
        local timestamp=`echo $state | awk -F ":" '{ print $1}'`
        local rrd_file=`echo $state | awk -F ":" '{ print $2}'`
        local value=`echo $state | awk -F ":" '{ print $3}'`
        DEBUG echo $state = $rrd_file $timestamp $value
        #see get_state_name
        rrd_file=`get_state_name $rrd_file`
        rrd_path=`get_rrd_path $rrd_dir $rrd_file`
        DEBUG "update $rrd_file in $rrd_path with $timestamp:$value"
        if [[ -f $rrd_path ]]; then
            rrdtool update $rrd_path $timestamp:$value
        fi
    done
}

#FIXED "Invalid DS name" bug for ds_name length must be less 20
get_state_name () {
    state_name=$1
    if [[ ${state_name:0:6} = "TcpExt" ]]; then
        state_name=${state_name:6:19}
    fi
    echo $state_name
}

#init tcp state with rrd file and update tcp state with fixed step
state_rrd_start() {
    local ip=$1
    local port=$2
    init_step=10
    update_step=10

    state_rrd_init $init_step

    while true; do
        INFO "update ... in $update_step s"
        tcp_state_rrd_update $ip $port
        net_state_rrd_update
        sleep $update_step
        trap "state_rrd_done; exit 0" EXIT
    done
}

state_rrd_done() {
    local begin_time=$1
    begin_time=${begin_time:-$start_time}
    DEBUG "start_time:$start_time bgein_time:$begin_time"

    local end_time=$2
    local now=$((`date "+%s"` + 10))
    end_time=${end_time:-$now}

    for state in ${state_list[@]}; do
        state=`get_state_name $state`
        local rrd_path=`get_rrd_path $rrd_dir $state`
        DEBUG "plotting ${rrd_dir}/${state}.png"
        rrdtool graph "$rrd_dir/$state"".png" -s $begin_time -e $end_time -h 400 \
            DEF:line1=$rrd_path:$state:AVERAGE AREA:line1#FF0000:"Average" \
            DEF:line2=$rrd_path:$state:MAX LINE1:line2#00FF00:"Max" \
            DEF:line3=$rrd_path:$state:MIN LINE1:line3#0000FF:"Min" >/dev/null
    done
    for state in ${net_list[@]}; do
        state=`get_state_name $state`
        local rrd_path=`get_rrd_path $rrd_dir $state`
        DEBUG "plotting ${rrd_dir}/${state}.png"
        rrdtool graph "$rrd_dir/$state"".png" -s $begin_time -e $end_time -h 400 \
            DEF:line1=$rrd_path:$state:AVERAGE AREA:line1#FF0000:"Average" \
            DEF:line2=$rrd_path:$state:MAX LINE1:line2#00FF00:"Max" \
            DEF:line3=$rrd_path:$state:MIN LINE1:line3#0000FF:"Min" >/dev/null
    done
    INFO "rrd grap done"
}

tcp_state_test () {
    echo "tcp_state_continue $step"
    tcp_state_continue $step

    #echo tcp_state_continue 1 "127.0.0.1"
    #tcp_state_continue 1 "127.0.0.1"

    #echo tcp_state_continue 1 "127.0.0.1" "53"
    #tcp_state_continue 1 "127.0.0.1" "53"
}

net_state_test () {
    net_state_continue 1
    #net_state_continue 2
}

#tcp_state_test
#dump_net_list

main ()
{
    if [[ $exec_mode = start ]]; then
        for s in ${state_list[@]}; do
            rrd_file=`get_state_name $s`
            rrd_path=$rrd_dir/${rrd_file}.*
            if [[ -f ${rrd_path}.rrd ]]; then
                echo "will remove" `ls $rrd_path`
                rm -rf $rrd_path
            fi
        done
        state_rrd_start > /dev/null &
    elif [[ $exec_mode = stop ]]; then
        pid_tmp=`ps aux |grep "net_state.sh start" |grep -v grep | awk '{print $2}'`
        if [[ -n $pid_tmp ]]; then
            kill $pid_tmp
        else
            echo "net_state is not running"
        fi
    elif [[ $exec_mode = status ]]; then
        strtmp=`ps aux |grep "net_state.sh start" |grep -v grep`
        if [[ $? = 0 ]]; then
            echo $strtmp | awk '{print "pid:"$2,$9,$12,$13}'
        else
            echo "$0 is not start"
        fi
    else
        echo "error message : ($0 $@) no support exec mode : start | stop | status"
        exit 1
    fi
}	# ----------  end of function main  ----------

main

